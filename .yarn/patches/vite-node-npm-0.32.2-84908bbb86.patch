diff --git a/dist/cli.d.ts b/dist/cli.d.ts
index bee3a3567df56a0794acf47330973c7ddec8ee38..6fbc53d2aa5fc6d74506ac8c72ffbd6df1ee786e 100644
--- a/dist/cli.d.ts
+++ b/dist/cli.d.ts
@@ -1,20 +1,28 @@
-import { f as ViteNodeServerOptions } from './types-516036fa.js';
-import 'vite/types/hot';
-import './types.d-7442d07f.js';
+import { f as ViteNodeServerOptions } from "./types-516036fa.js";
+import "./types.d-7442d07f.js";
 
 interface CliOptions {
-    root?: string;
-    script?: boolean;
-    config?: string;
-    mode?: string;
-    watch?: boolean;
-    options?: ViteNodeServerOptionsCLI;
-    '--'?: string[];
+  root?: string;
+  script?: boolean;
+  config?: string;
+  mode?: string;
+  watch?: boolean;
+  options?: ViteNodeServerOptionsCLI;
+  "--"?: string[];
 }
 type Optional<T> = T | undefined;
 type ComputeViteNodeServerOptionsCLI<T extends Record<string, any>> = {
-    [K in keyof T]: T[K] extends Optional<RegExp[]> ? string | string[] : T[K] extends Optional<(string | RegExp)[]> ? string | string[] : T[K] extends Optional<(string | RegExp)[] | true> ? string | string[] | true : T[K] extends Optional<Record<string, any>> ? ComputeViteNodeServerOptionsCLI<T[K]> : T[K];
+  [K in keyof T]: T[K] extends Optional<RegExp[]>
+    ? string | string[]
+    : T[K] extends Optional<(string | RegExp)[]>
+    ? string | string[]
+    : T[K] extends Optional<(string | RegExp)[] | true>
+    ? string | string[] | true
+    : T[K] extends Optional<Record<string, any>>
+    ? ComputeViteNodeServerOptionsCLI<T[K]>
+    : T[K];
 };
-type ViteNodeServerOptionsCLI = ComputeViteNodeServerOptionsCLI<ViteNodeServerOptions>;
+type ViteNodeServerOptionsCLI =
+  ComputeViteNodeServerOptionsCLI<ViteNodeServerOptions>;
 
 export { CliOptions, ViteNodeServerOptionsCLI };
diff --git a/dist/client.d.ts b/dist/client.d.ts
index f299f6f3e255157d0ffeab0b7a3d0dd91e91c3ef..4ca445f13cb827da69b92f46f3c6942318f733eb 100644
--- a/dist/client.d.ts
+++ b/dist/client.d.ts
@@ -1,3 +1,6 @@
-import './types.d-7442d07f.js';
-export { i as DEFAULT_REQUEST_STUBS, M as ModuleCacheMap, h as ViteNodeRunner } from './types-516036fa.js';
-import 'vite/types/hot';
+import "./types.d-7442d07f.js";
+export {
+  i as DEFAULT_REQUEST_STUBS,
+  M as ModuleCacheMap,
+  h as ViteNodeRunner,
+} from "./types-516036fa.js";
diff --git a/dist/hmr.d.ts b/dist/hmr.d.ts
index 9d1224a7d1bcfeb8bfc9cebe092e42198e8cb288..7c2135fe5b0307ac44cdb9495b14fe3f81c8cb39 100644
--- a/dist/hmr.d.ts
+++ b/dist/hmr.d.ts
@@ -1,24 +1,29 @@
-import { EventEmitter } from 'node:events';
-import { HMRPayload as HMRPayload$1, Plugin } from 'vite';
-import { h as ViteNodeRunner, H as HotContext } from './types-516036fa.js';
-import 'vite/types/hot';
-import './types.d-7442d07f.js';
+import { EventEmitter } from "node:events";
+import { HMRPayload as HMRPayload$1, Plugin } from "vite";
+import { H as HotContext, h as ViteNodeRunner } from "./types-516036fa.js";
+import "./types.d-7442d07f.js";
 
 type EventType = string | symbol;
 type Handler<T = unknown> = (event: T) => void;
 interface Emitter<Events extends Record<EventType, unknown>> {
-    on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;
-    off<Key extends keyof Events>(type: Key, handler?: Handler<Events[Key]>): void;
-    emit<Key extends keyof Events>(type: Key, event: Events[Key]): void;
-    emit<Key extends keyof Events>(type: undefined extends Events[Key] ? Key : never): void;
+  on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;
+  off<Key extends keyof Events>(
+    type: Key,
+    handler?: Handler<Events[Key]>
+  ): void;
+  emit<Key extends keyof Events>(type: Key, event: Events[Key]): void;
+  emit<Key extends keyof Events>(
+    type: undefined extends Events[Key] ? Key : never
+  ): void;
 }
 type HMREmitter = Emitter<{
-    'message': HMRPayload$1;
-}> & EventEmitter;
-declare module 'vite' {
-    interface ViteDevServer {
-        emitter: HMREmitter;
-    }
+  message: HMRPayload$1;
+}> &
+  EventEmitter;
+declare module "vite" {
+  interface ViteDevServer {
+    emitter: HMREmitter;
+  }
 }
 declare function createHmrEmitter(): HMREmitter;
 declare function viteNodeHmrPlugin(): Plugin;
@@ -29,101 +34,134 @@ type HMRPayload =
   | FullReloadPayload
   | CustomPayload
   | ErrorPayload
-  | PrunePayload
+  | PrunePayload;
 
 interface ConnectedPayload {
-  type: 'connected'
+  type: "connected";
 }
 
 interface UpdatePayload {
-  type: 'update'
-  updates: Update[]
+  type: "update";
+  updates: Update[];
 }
 
 interface Update {
-  type: 'js-update' | 'css-update'
-  path: string
-  acceptedPath: string
-  timestamp: number
+  type: "js-update" | "css-update";
+  path: string;
+  acceptedPath: string;
+  timestamp: number;
   /**
    * @experimental internal
    */
-  explicitImportRequired?: boolean | undefined
+  explicitImportRequired?: boolean | undefined;
 }
 
 interface PrunePayload {
-  type: 'prune'
-  paths: string[]
+  type: "prune";
+  paths: string[];
 }
 
 interface FullReloadPayload {
-  type: 'full-reload'
-  path?: string
+  type: "full-reload";
+  path?: string;
 }
 
 interface CustomPayload {
-  type: 'custom'
-  event: string
-  data?: any
+  type: "custom";
+  event: string;
+  data?: any;
 }
 
 interface ErrorPayload {
-  type: 'error'
+  type: "error";
   err: {
-    [name: string]: any
-    message: string
-    stack: string
-    id?: string
-    frame?: string
-    plugin?: string
-    pluginCode?: string
+    [name: string]: any;
+    message: string;
+    stack: string;
+    id?: string;
+    frame?: string;
+    plugin?: string;
+    pluginCode?: string;
     loc?: {
-      file?: string
-      line: number
-      column: number
-    }
-  }
+      file?: string;
+      line: number;
+      column: number;
+    };
+  };
 }
 
 interface CustomEventMap {
-  'vite:beforeUpdate': UpdatePayload
-  'vite:afterUpdate': UpdatePayload
-  'vite:beforePrune': PrunePayload
-  'vite:beforeFullReload': FullReloadPayload
-  'vite:error': ErrorPayload
-  'vite:invalidate': InvalidatePayload
+  "vite:beforeUpdate": UpdatePayload;
+  "vite:afterUpdate": UpdatePayload;
+  "vite:beforePrune": PrunePayload;
+  "vite:beforeFullReload": FullReloadPayload;
+  "vite:error": ErrorPayload;
+  "vite:invalidate": InvalidatePayload;
 }
 
 interface InvalidatePayload {
-  path: string
-  message: string | undefined
+  path: string;
+  message: string | undefined;
 }
 
-type InferCustomEventPayload<T extends string> = T extends keyof CustomEventMap ? CustomEventMap[T] : any;
+type InferCustomEventPayload<T extends string> = T extends keyof CustomEventMap
+  ? CustomEventMap[T]
+  : any;
 interface HotModule {
-    id: string;
-    callbacks: HotCallback[];
+  id: string;
+  callbacks: HotCallback[];
 }
 interface HotCallback {
-    deps: string[];
-    fn: (modules: object[]) => void;
+  deps: string[];
+  fn: (modules: object[]) => void;
 }
 interface CacheData {
-    hotModulesMap: Map<string, HotModule>;
-    dataMap: Map<string, any>;
-    disposeMap: Map<string, (data: any) => void | Promise<void>>;
-    pruneMap: Map<string, (data: any) => void | Promise<void>>;
-    customListenersMap: Map<string, ((data: any) => void)[]>;
-    ctxToListenersMap: Map<string, Map<string, ((data: any) => void)[]>>;
-    messageBuffer: string[];
-    isFirstUpdate: boolean;
-    pending: boolean;
-    queued: Promise<(() => void) | undefined>[];
+  hotModulesMap: Map<string, HotModule>;
+  dataMap: Map<string, any>;
+  disposeMap: Map<string, (data: any) => void | Promise<void>>;
+  pruneMap: Map<string, (data: any) => void | Promise<void>>;
+  customListenersMap: Map<string, ((data: any) => void)[]>;
+  ctxToListenersMap: Map<string, Map<string, ((data: any) => void)[]>>;
+  messageBuffer: string[];
+  isFirstUpdate: boolean;
+  pending: boolean;
+  queued: Promise<(() => void) | undefined>[];
 }
 declare function getCache(runner: ViteNodeRunner): CacheData;
-declare function sendMessageBuffer(runner: ViteNodeRunner, emitter: HMREmitter): void;
-declare function reload(runner: ViteNodeRunner, files: string[]): Promise<any[]>;
-declare function handleMessage(runner: ViteNodeRunner, emitter: HMREmitter, files: string[], payload: HMRPayload): Promise<void>;
-declare function createHotContext(runner: ViteNodeRunner, emitter: HMREmitter, files: string[], ownerPath: string): HotContext;
+declare function sendMessageBuffer(
+  runner: ViteNodeRunner,
+  emitter: HMREmitter
+): void;
+declare function reload(
+  runner: ViteNodeRunner,
+  files: string[]
+): Promise<any[]>;
+declare function handleMessage(
+  runner: ViteNodeRunner,
+  emitter: HMREmitter,
+  files: string[],
+  payload: HMRPayload
+): Promise<void>;
+declare function createHotContext(
+  runner: ViteNodeRunner,
+  emitter: HMREmitter,
+  files: string[],
+  ownerPath: string
+): HotContext;
 
-export { Emitter, EventType, HMREmitter, Handler, HotCallback, HotModule, InferCustomEventPayload, createHmrEmitter, createHotContext, getCache, handleMessage, reload, sendMessageBuffer, viteNodeHmrPlugin };
+export {
+  Emitter,
+  EventType,
+  HMREmitter,
+  Handler,
+  HotCallback,
+  HotModule,
+  InferCustomEventPayload,
+  createHmrEmitter,
+  createHotContext,
+  getCache,
+  handleMessage,
+  reload,
+  sendMessageBuffer,
+  viteNodeHmrPlugin,
+};
diff --git a/dist/index.d.ts b/dist/index.d.ts
index c5ec669b059ea14b41e48507ee00045af94278df..6b94cc2f26dbb634aaf6c6f73b361049d73afd36 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,3 +1,23 @@
-export { A as Arrayable, a as Awaitable, C as CreateHotContextFunction, g as DebuggerOptions, D as DepsHandlingOptions, b as FetchFunction, F as FetchResult, H as HotContext, d as ModuleCache, M as ModuleCacheMap, N as Nullable, R as RawSourceMap, c as ResolveIdFunction, S as StartOfSourceMap, e as ViteNodeResolveId, V as ViteNodeRunnerOptions, f as ViteNodeServerOptions } from './types-516036fa.js';
-export { D as DecodedSourceMap, E as EncodedSourceMap } from './types.d-7442d07f.js';
-import 'vite/types/hot';
+export {
+  A as Arrayable,
+  a as Awaitable,
+  C as CreateHotContextFunction,
+  g as DebuggerOptions,
+  D as DepsHandlingOptions,
+  b as FetchFunction,
+  F as FetchResult,
+  H as HotContext,
+  d as ModuleCache,
+  M as ModuleCacheMap,
+  N as Nullable,
+  R as RawSourceMap,
+  c as ResolveIdFunction,
+  S as StartOfSourceMap,
+  e as ViteNodeResolveId,
+  V as ViteNodeRunnerOptions,
+  f as ViteNodeServerOptions,
+} from "./types-516036fa.js";
+export {
+  D as DecodedSourceMap,
+  E as EncodedSourceMap,
+} from "./types.d-7442d07f.js";
diff --git a/dist/server.d.ts b/dist/server.d.ts
index a15a4a96a74c2c4e895d80839a325ef0fadb306e..41589a3b43a5c58db5b96f5702b6587dbe5b401a 100644
--- a/dist/server.d.ts
+++ b/dist/server.d.ts
@@ -1,49 +1,71 @@
-import { TransformResult, ViteDevServer } from 'vite';
-import { E as EncodedSourceMap } from './types.d-7442d07f.js';
-import { g as DebuggerOptions, D as DepsHandlingOptions, f as ViteNodeServerOptions, F as FetchResult, e as ViteNodeResolveId } from './types-516036fa.js';
-import 'vite/types/hot';
+import { TransformResult, ViteDevServer } from "vite";
+import {
+  g as DebuggerOptions,
+  D as DepsHandlingOptions,
+  F as FetchResult,
+  e as ViteNodeResolveId,
+  f as ViteNodeServerOptions,
+} from "./types-516036fa.js";
+import { E as EncodedSourceMap } from "./types.d-7442d07f.js";
 
 declare class Debugger {
-    options: DebuggerOptions;
-    dumpDir: string | undefined;
-    initPromise: Promise<void> | undefined;
-    externalizeMap: Map<string, string>;
-    constructor(root: string, options: DebuggerOptions);
-    clearDump(): Promise<void>;
-    encodeId(id: string): string;
-    recordExternalize(id: string, path: string): Promise<void>;
-    dumpFile(id: string, result: TransformResult | null): Promise<void>;
-    loadDump(id: string): Promise<TransformResult | null>;
-    writeInfo(): Promise<void>;
+  options: DebuggerOptions;
+  dumpDir: string | undefined;
+  initPromise: Promise<void> | undefined;
+  externalizeMap: Map<string, string>;
+  constructor(root: string, options: DebuggerOptions);
+  clearDump(): Promise<void>;
+  encodeId(id: string): string;
+  recordExternalize(id: string, path: string): Promise<void>;
+  dumpFile(id: string, result: TransformResult | null): Promise<void>;
+  loadDump(id: string): Promise<TransformResult | null>;
+  writeInfo(): Promise<void>;
 }
 
 declare function guessCJSversion(id: string): string | undefined;
-declare function shouldExternalize(id: string, options?: DepsHandlingOptions, cache?: Map<string, Promise<string | false>>): Promise<string | false>;
+declare function shouldExternalize(
+  id: string,
+  options?: DepsHandlingOptions,
+  cache?: Map<string, Promise<string | false>>
+): Promise<string | false>;
 
 declare class ViteNodeServer {
-    server: ViteDevServer;
-    options: ViteNodeServerOptions;
-    private fetchPromiseMap;
-    private transformPromiseMap;
-    private existingOptimizedDeps;
-    fetchCache: Map<string, {
-        duration?: number | undefined;
-        timestamp: number;
-        result: FetchResult;
-    }>;
-    externalizeCache: Map<string, Promise<string | false>>;
-    debugger?: Debugger;
-    constructor(server: ViteDevServer, options?: ViteNodeServerOptions);
-    shouldExternalize(id: string): Promise<string | false>;
-    private ensureExists;
-    resolveId(id: string, importer?: string, transformMode?: 'web' | 'ssr'): Promise<ViteNodeResolveId | null>;
-    getSourceMap(source: string): EncodedSourceMap | null;
-    fetchModule(id: string, transformMode?: 'web' | 'ssr'): Promise<FetchResult>;
-    transformRequest(id: string, filepath?: string): Promise<TransformResult | null | undefined>;
-    getTransformMode(id: string): "web" | "ssr";
-    private _fetchModule;
-    protected processTransformResult(filepath: string, result: TransformResult): Promise<TransformResult>;
-    private _transformRequest;
+  server: ViteDevServer;
+  options: ViteNodeServerOptions;
+  private fetchPromiseMap;
+  private transformPromiseMap;
+  private existingOptimizedDeps;
+  fetchCache: Map<
+    string,
+    {
+      duration?: number | undefined;
+      timestamp: number;
+      result: FetchResult;
+    }
+  >;
+  externalizeCache: Map<string, Promise<string | false>>;
+  debugger?: Debugger;
+  constructor(server: ViteDevServer, options?: ViteNodeServerOptions);
+  shouldExternalize(id: string): Promise<string | false>;
+  private ensureExists;
+  resolveId(
+    id: string,
+    importer?: string,
+    transformMode?: "web" | "ssr"
+  ): Promise<ViteNodeResolveId | null>;
+  getSourceMap(source: string): EncodedSourceMap | null;
+  fetchModule(id: string, transformMode?: "web" | "ssr"): Promise<FetchResult>;
+  transformRequest(
+    id: string,
+    filepath?: string
+  ): Promise<TransformResult | null | undefined>;
+  getTransformMode(id: string): "web" | "ssr";
+  private _fetchModule;
+  protected processTransformResult(
+    filepath: string,
+    result: TransformResult
+  ): Promise<TransformResult>;
+  private _transformRequest;
 }
 
 export { ViteNodeServer, guessCJSversion, shouldExternalize };
diff --git a/dist/types-516036fa.d.ts b/dist/types-516036fa.d.ts
index 26229f82050ba3809f86c98942f06031c19d5496..fc1e6c43136c7baf374a84728de37512d265eaa4 100644
--- a/dist/types-516036fa.d.ts
+++ b/dist/types-516036fa.d.ts
@@ -1,4 +1,3 @@
-import { ViteHotContext } from 'vite/types/hot';
 import { E as EncodedSourceMap } from './types.d-7442d07f.js';
 
 declare const DEFAULT_REQUEST_STUBS: Record<string, unknown>;
@@ -100,7 +99,7 @@ interface FetchResult {
     externalize?: string;
     map?: EncodedSourceMap | null;
 }
-type HotContext = Omit<ViteHotContext, 'acceptDeps' | 'decline'>;
+type HotContext = any;
 type FetchFunction = (id: string) => Promise<FetchResult>;
 type ResolveIdFunction = (id: string, importer?: string) => Awaitable<ViteNodeResolveId | null | undefined | void>;
 type CreateHotContextFunction = (runner: ViteNodeRunner, url: string) => HotContext;
diff --git a/dist/types.d.ts b/dist/types.d.ts
index 6491e193b509ce6792f3d1d3290d5f2383bb3060..6b94cc2f26dbb634aaf6c6f73b361049d73afd36 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -1,3 +1,23 @@
-import 'vite/types/hot';
-export { D as DecodedSourceMap, E as EncodedSourceMap } from './types.d-7442d07f.js';
-export { A as Arrayable, a as Awaitable, C as CreateHotContextFunction, g as DebuggerOptions, D as DepsHandlingOptions, b as FetchFunction, F as FetchResult, H as HotContext, d as ModuleCache, M as ModuleCacheMap, N as Nullable, R as RawSourceMap, c as ResolveIdFunction, S as StartOfSourceMap, e as ViteNodeResolveId, V as ViteNodeRunnerOptions, f as ViteNodeServerOptions } from './types-516036fa.js';
+export {
+  A as Arrayable,
+  a as Awaitable,
+  C as CreateHotContextFunction,
+  g as DebuggerOptions,
+  D as DepsHandlingOptions,
+  b as FetchFunction,
+  F as FetchResult,
+  H as HotContext,
+  d as ModuleCache,
+  M as ModuleCacheMap,
+  N as Nullable,
+  R as RawSourceMap,
+  c as ResolveIdFunction,
+  S as StartOfSourceMap,
+  e as ViteNodeResolveId,
+  V as ViteNodeRunnerOptions,
+  f as ViteNodeServerOptions,
+} from "./types-516036fa.js";
+export {
+  D as DecodedSourceMap,
+  E as EncodedSourceMap,
+} from "./types.d-7442d07f.js";
diff --git a/dist/utils.d.ts b/dist/utils.d.ts
index 164c1ca34f1d580659578b3a93b428ee3024b9d8..e444e4ffd09b87c9a7e4641b12b43d3afa9c17aa 100644
--- a/dist/utils.d.ts
+++ b/dist/utils.d.ts
@@ -1,6 +1,5 @@
-import { N as Nullable, A as Arrayable } from './types-516036fa.js';
-import 'vite/types/hot';
-import './types.d-7442d07f.js';
+import { A as Arrayable, N as Nullable } from "./types-516036fa.js";
+import "./types.d-7442d07f.js";
 
 declare const isWindows: boolean;
 declare function slash(str: string): string;
@@ -12,9 +11,12 @@ declare function cleanUrl(url: string): string;
 declare function isInternalRequest(id: string): boolean;
 declare function normalizeModuleId(id: string): string;
 declare function isPrimitive(v: any): boolean;
-declare function toFilePath(id: string, root: string): {
-    path: string;
-    exists: boolean;
+declare function toFilePath(
+  id: string,
+  root: string
+): {
+  path: string;
+  exists: boolean;
 };
 declare function isNodeBuiltin(id: string): boolean;
 /**
@@ -24,4 +26,18 @@ declare function isNodeBuiltin(id: string): boolean;
  */
 declare function toArray<T>(array?: Nullable<Arrayable<T>>): Array<T>;
 
-export { VALID_ID_PREFIX, cleanUrl, hashRE, isInternalRequest, isNodeBuiltin, isPrimitive, isWindows, normalizeModuleId, normalizeRequestId, queryRE, slash, toArray, toFilePath };
+export {
+  VALID_ID_PREFIX,
+  cleanUrl,
+  hashRE,
+  isInternalRequest,
+  isNodeBuiltin,
+  isPrimitive,
+  isWindows,
+  normalizeModuleId,
+  normalizeRequestId,
+  queryRE,
+  slash,
+  toArray,
+  toFilePath,
+};
diff --git a/package.json b/package.json
index 586c769ddc153d2c7c27be2283744b7d881c04fe..4cd8f6f0eaa12e7054fc5a9f85d783ecf30ca215 100644
--- a/package.json
+++ b/package.json
@@ -1,4 +1,5 @@
 {
+  "type": "module",
   "name": "vite-node",
   "version": "0.32.2",
   "description": "Vite as Node.js runtime",
